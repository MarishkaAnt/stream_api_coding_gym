package org.example.lambdas.functionalinterfaces;

/** Задание на отработку функциональных интерфейсов и лямбд.
 *
 * 1. В этом же пакете создай собственный функциональный интерфейс Greetings, имеющий метод say().
 * 2. В этом же пакете создай класс GreetingsImpl, имплементирующий этот интерфейс, и переопредели метод,
 * чтобы выводил "Hello!"
 * 3. Вызови внутри класса FunctionalInterfacesTask метод say() тремя разными способами:
 *      3.1 через создание объекта класса GreetingsImpl
 * 	    3.2 через анонимный класс Greetings с переопределением метода say(), чтобы выводил "Guten Tag!"
 * 	    3.3 через лямбду, с переопределением метода say(), чтобы выводил "Ahoj!"
 *
 * 4. Воспользуйся стандартными функциональными интерфейсами (package java.util.function).
 *    Создавай их либо через анонимный класс, либо через обычный класс.
 *    Например:
 * 	    4.1 создай свой Predicate, метод которого принимает имя пользователя и если оно не null, то выводит "Hello, {name}"
 * 	        и возвращает true, иначе не выводит ничего и возвращает false
 * 	    4.2 создай свой BiFunction, метод которого принимает имя и фамилию, и выводит приветствие "Hello, {name} {lastName}"
 * 	        и возвращает общую длинну полного имени (name.size + lastName.size)
 *
 *    и так далее, придумай как можно больше вариантов со стандартными интерфейсами и вызывай их разными способами
 *    (через лямбду, метод-референс, или на объекте класса, или на объекте интерфейса с переопределением в анонимном классе.)
 *
 *    Самые растпространенные из них ты можешь увидеть, например, в стримах:
 *    Consumer, Supplier, Function, BiFunction, Predicate, BinaryOperator...
 *    Также, с популярными функциональными интерфейсами Runnable и Callable ты познакомишься позже.
 */
public class FunctionalInterfacesTask {

    //Вставь свою реализацию сюда

}
